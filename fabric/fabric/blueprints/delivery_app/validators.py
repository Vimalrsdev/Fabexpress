from wtforms import ValidationError
import re
from fabric import db
from fabric.modules.models import Customer, Order


def allowed_values(values):
    """
    Function for splitting the allowed values into 'or' separated string.
    @param values: Set of allowed possible values.
    @return: A string generated by concatenating values - separated by or.
    """
    values_str = ' or '.join(map(str, values))
    return values_str


def validate_customer_id(form, field):
    """
    Validating the customer id by checking the id in the Customers table.
    @param form:
    @param field:
    """
    customer_id = field.data
    is_valid = None
    try:
        is_valid = db.session.query(Customer).filter(Customer.CustomerId == customer_id).one_or_none()

    except Exception as e:
        pass
    if is_valid is None:
        raise ValidationError('Customer ID is not valid')


def check_pr_id_already_exists(form, field):
    """
    Checking whether the given Pickup Request Id is already present in Orders Table or not. If the id is present,
    raise an exception.
    @param form:
    @param field:
    """
    pickup_request_id = field.data
    try:
        is_present = db.session.query(Order).filter(Order.PickupRequestId == pickup_request_id).one_or_none()
    except Exception as e:
        is_present = True
    if is_present is not None:
        raise ValidationError('Pickup Request ID is already present in the orders table')


def validate_latitude(form, field):
    """
    Checking whether the given lat value is valid or not. i.e. latitude value must be between -90 and 90.
    @param form:
    @param field:
    @return: True if form data is valid, else False.
    """
    lat = field.data
    if -90 < lat < 90:
        return True
    else:
        raise ValidationError('Latitude value must be between -90 and 90.')


def validate_longitude(form, field):
    """
    Checking whether the given long value is valid or not. i.e. longitude value must be between -180 and 180.
    @param form:
    @param field:
    @return: True if form data is valid, else False.
    """
    long = field.data
    if -180 < long < 180:
        return True
    else:
        raise ValidationError('Longitude value must be between -180 and 180.')


def validate_otp_types(form, field):
    """
    Checking whether the otp_type variable in the send_otp is in the allowed otp types or not.
    @param form:
    @param field:
    @return: If validation fails, validator will return a validation error.
    """
    allowed_otp_types = ["LOGIN", "ADHOC", "DELIVERY"]
    otp_type = field.data
    if otp_type not in allowed_otp_types:
        raise ValidationError(f'otp_type should be {allowed_values(allowed_otp_types)}.')


def validate_hanger_instruction_actions(form, field):
    """
    Checking whether the action is ADD/REMOVE.
    @param form:
    @param field:
    @return: If validation fails, validator will return a validation error.
    """
    allowed_actions = ["ADD", "REMOVE"]
    action = field.data
    if action not in allowed_actions:
        raise ValidationError(f'action should be {allowed_values(allowed_actions)}.')


def validate_sorting_method(form, field):
    """
    Checking the sorting_method is TIME_SLOT/NEAR_ME.
    @param form:
    @param field:
    @return: If validation fails, validator will return a validation error.
    """
    allowed_sorting_methods = ["TIME_SLOT", "NEAR_ME", "BOTH"]
    sorting_method = field.data
    if sorting_method not in allowed_sorting_methods:
        raise ValidationError(f"sorting_method should be {allowed_values(allowed_sorting_methods)}.")


def validate_gender(form, field):
    """
    Checking the gender is 'M' or 'F'.
    @param form:
    @param field:
    @return: If validation fails, validator will return a validation error.
    """
    gender = field.data
    allowed_gender_types = ["M", "F"]
    if gender not in allowed_gender_types:
        raise ValidationError(f'gender should be {allowed_values(allowed_gender_types)}.')


def validate_email(form, field):
    """
    Checking the email is valid or not.
    @param form:
    @param field:
    @return: If validation fails, validator will return a validation error.
    """
    email = field.data
    regex ='^[a-zA-Z0-9._%+-]+@'
    # regex = '^[a-z0-9]+[\._]?[a-z0-9]+[@]\w+[.]\w{2,3}$'
    email_regex = re.search(regex, email)
    if not email_regex:
        raise ValidationError('Please provide a valid email address.')


def validate_payment_collection(form, field):
    """
    Checking the collected modes are valid or not.
    @param form:
    @param field:
    @return: If validation fails, validator will return a validation error.
    """
    collected = field.data
    allowed_payment_modes = ["CASH_COLLECTION", "CARD_COLLECTION", "COUPON", "PAYTMEDC","PaytmEDC","PHONEPE","RAZORPAY"]
    for collection in collected:
        # If the payment mode is not in the allowed modes, raise validation error.
        if collection['mode'] not in allowed_payment_modes:
            raise ValidationError(f'mode should be {allowed_values(allowed_payment_modes)}.')

        # If the payment mode is CARD, transaction_id is required.
        if collection['mode'] == 'CARD_COLLECTION':
            if collection.get('transaction_id') is None:
                raise ValidationError('Field transaction_id is required for CARD payment mode.')


def validate_complaint_list(form, field):
    """
    Checking whether the list of garments for complaint has mandatory fields or not.
    @param form:
    @param field:
    @return: If validation fails, validator will return a validation error.
    """
    complaint_garment_list = field.data
    valid = True
    for complaint_garment in complaint_garment_list:
        if complaint_garment.get('order_garment_id') is None:
            valid = False
            break
        if complaint_garment.get('department_complaint') is None:
            valid = False
            break
        if complaint_garment.get('complaint_type') is None:
            valid = False
            break
        if complaint_garment.get('complaint_remarks') is None:
            valid = False
            break
    if not valid:
        raise ValidationError(
            'order_garment_id, department_complaint, complaint_remarks are required in the complaint_garment_list.')


def validate_day_interval(form, field):
    """
    Validating the given day is less than 7 or not. (A week or not).
    @param form:
    @param field:
    @return: If validation fails, validator will return a validation error.
    """
    day_interval = field.data
    if day_interval > 7:
        raise ValidationError('Up to 7 days are permissible.')


def validate_activities(form, field):
    """
    Validating the type of activities.
    @param form:
    @param field:
    @return:
    """
    allowed_activity_types = ["Pickup", "Delivery", "Delivered-UnPaid","Delivered-Unpaid"]
    activity = field.data
    if activity not in allowed_activity_types:
        raise ValidationError(f"activity should be {allowed_values(allowed_activity_types)}")


def validate_address_details(form, field):
    """
    Validating the list of customer address details.
    @param form:
    @param field:
    @return:
    """
    address_details = field.data
    for address in address_details:
        if address.get('address_line_1') is None:
            raise ValidationError('address_line_1 is mandatory.')

        if address.get('lat'):
            if -90 < address.get('lat') < 90:
                pass
            else:
                raise ValidationError('Latitude value must be between -90 and 90.')

        if address.get('long'):
            if -180 < address.get('long') < 180:
                pass
            else:
                raise ValidationError('Longitude value must be between -180 and 180.')


def validate_photo_types(form, field):
    """
    Validating the types of order garment photo.
    @param form:
    @param field:
    @return:
    """
    allowed_photo_types = ["QC", "VAS", "NORMAL"]
    photo_type = field.data
    if photo_type not in allowed_photo_types:
        raise ValidationError(f'photo_type should be {allowed_values(allowed_photo_types)}.')

def validate_rewash_complaint_list(form, field):
    """
    Checking whether the list of garments for complaint has mandatory fields or not.
    @param form:
    @param field:
    @return: If validation fails, validator will return a validation error.
    """
    complaint_garment_list = field.data
    valid = True
    for complaint_garment in complaint_garment_list:
        if complaint_garment.get('order_id') is None:
            valid = False
            break
        if complaint_garment.get('order_garment_id') is None:
            valid = False
            break
        if complaint_garment.get('department_complaint') is None:
            valid = False
            break
        if complaint_garment.get('complaint_id') is None:
            valid = False
            break
        if complaint_garment.get('crm_complaint_status') is None:
            valid = False
            break
    if not valid:
        raise ValidationError(
            'order_garment_id, department_complaint are required in the complaint_garment_list.')


def validate_final_rewash_list(form, field):
    """
    Checking whether the list of garments for complaint has mandatory fields or not.
    @param form:
    @param field:
    @return: If validation fails, validator will return a validation error.
    """
    final_rewash_list = field.data
    valid = True
    for complaint_garment in final_rewash_list:
        if complaint_garment.get('old_garment_id') is None:
            valid = False
            break
        if complaint_garment.get('new_garment_id') is None:
            valid = False
            break
        if complaint_garment.get('complaint_status') is None:
            valid = False
            break
        if complaint_garment.get('complaint_id') is None:
            valid = False
            break

    if not valid:
        raise ValidationError(
            'old_order_garment_id, new_order_garment_id, complaint_status, complaint_id are required in the '
            'final_rewash_list.')